import time
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import streamlit as st
import plotly.express as px



st.write("""## –ß–∞–µ–≤—ã–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ""")
path = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv'
tips = pd.read_csv(path)
st.dataframe(tips)

@st.cache_data
def convert_df(tips):
    return tips.to_csv().encode('utf-8')

csv = convert_df(tips)
st.download_button(
    label="Download data as CSV",
    data=csv,
    file_name='tips.csv.csv',
    mime='text/csv',
)

tips['time_order']= pd.DataFrame(np.random.choice(pd.date_range('2023-01-01', '2023-01-31'), 244))

st.write("""### –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–≥–æ –¥–∏–Ω–∞–º–∏–∫—É —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏""")

plt.style.use('ggplot')
fig, ax = plt.subplots(figsize=(10, 5))
sns.lineplot(data=tips, x="time_order", y="tip", hue="time", ax=ax)
plt.xticks(rotation=60, size=13, color='k')
st.pyplot(fig)

st.write("""### –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è **total_bill**""")

fig, ax = plt.subplots(figsize=(10, 5))
min_value = float(0)
max_value = tips["total_bill"].max()
bin_width = (max_value - min_value) / 50
value = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π:", min_value, max_value, (min_value, max_value), step=bin_width)
filtered_data = tips[(tips["total_bill"] >= value[0]) & (tips["total_bill"] <= value[1])]
sns.histplot(data=filtered_data, x="total_bill", ax=ax, color='purple')
st.pyplot(fig)


st.write("""### –ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –≤–∏–¥–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ —Å—É–º–º—ã —á–µ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏""")

fig = px.histogram(tips, x="total_bill", color="time", hover_data=tips.columns)
fig.update_layout(plot_bgcolor='lightgray')
fig.update_traces(marker=dict(line=dict(width=0.5, color='black')))
st.plotly_chart(fig)

st.write("""### Scatterplot, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Å–≤—è–∑—å –º–µ–∂–¥—É total_bill and tip""")

fig, ax = plt.subplots(figsize=(5, 5))
sns.scatterplot(data=tips, x='total_bill', y='tip', hue='time', s=30)
st.pyplot(fig)


st.write("""### –ì—Ä–∞—Ñ–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–≤—è–∑—ã–≤–∞–µ—Ç total_bill, tip, –∏ size""")

fig = px.scatter(tips, x="total_bill", y="tip", color="size", hover_data=tips.columns)
fig.update_layout(plot_bgcolor='lightgray', paper_bgcolor='darkslategrey')
fig.update_traces(marker=dict(line=dict(width=0.5, color='black')))
st.plotly_chart(fig)

st.write("""### –ì—Ä–∞—Ñ–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –≤—è–∑—å –º–µ–∂–¥—É –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å—á–µ—Ç–∞""")
fig = px.scatter(tips, x="total_bill", y="tip", color="day", facet_col="day", facet_col_wrap=2, height=500)
fig.update_layout(paper_bgcolor="#f5f5f5", plot_bgcolor="#ffffff", margin=dict(l=20, r=20, b=20, t=20))
st.plotly_chart(fig)


st.write("""**–Ø –¥—É–º–∞—é –≤—ã –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª–∏—Å—å –∑–∞ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–∫—É—Å–∏–º**""")
def cook_snack():
    msg = st.toast('Gathering ingredients...')
    time.sleep(2)
    msg.toast('Cooking...')
    time.sleep(2)
    msg.toast('Ready! Bon appetit!', icon = "ü•û")

if st.button('Cook snack'):
    cook_snack()

st.write("""### Scatter plot —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –ø–æ –æ—Å–∏ Y, —á–∞–µ–≤—ã–º–∏ –ø–æ –æ—Å–∏ X, –∏ —Ü–≤–µ—Ç–æ–º –ø–æ –ø–æ–ª—É""")

fig = px.scatter(tips, x="tip", y="day", color="sex", hover_data=tips.columns, height=500)
fig.update_layout(plot_bgcolor='lightgray', paper_bgcolor='darkslategrey')
st.plotly_chart(fig)

st.write("""### Box plot c —Å—É–º–º–æ–π –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å,–ø–æ time (Dinner/Lunch)""")
fig = px.box(tips, x="day", y="total_bill", color="time")
fig.update_layout(width=600, height=400)
fig.update_layout(
    plot_bgcolor='lightgray', 
    paper_bgcolor='darkslategrey'
)
st.plotly_chart(fig)

st.write("""### 2 –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —á–∞–µ–≤—ã—Ö –Ω–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω. –†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö —Ä—è–¥–æ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏""")

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
tips[tips['time'] == 'Lunch'].tip.hist(ax=ax1, bins=20, alpha=0.5, label='Lunch', edgecolor='black')
tips[tips['time'] == 'Dinner'].tip.hist(ax=ax2, bins=20, alpha=0.5, label='Dinner', edgecolor='black')
ax1.set_title('–ß–∞–µ–≤—ã–µ –Ω–∞ –æ–±–µ–¥')
ax2.set_title('–ß–∞–µ–≤—ã–µ –Ω–∞ —É–∂–∏–Ω')
st.pyplot(fig)


st.write("""### 2 scatterplots (–¥–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –∫—É—Ä—è—â–∏–π/–Ω–µ–∫—É—Ä—è—â–∏–π.""")
st.write("""***–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä —á–∞–µ–≤—ã—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏***""")

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))

filtered_data = tips.copy()
filtered_data['smoker'] = pd.Categorical(filtered_data['smoker']).codes
st.sidebar.title('–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è scatter plots')

tip_threshold = st.sidebar.slider('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–µ–≤—ã—Ö', 0.0, 10.0, 0.0)
filtered_data = filtered_data.query(f'tip > {tip_threshold}')

filtered_data[filtered_data['sex'] == 'Male'].plot.scatter(x='total_bill', y='tip', c='smoker', colormap='viridis', ax=ax1)
filtered_data[filtered_data['sex'] == 'Female'].plot.scatter(x='total_bill', y='tip', c='smoker', colormap='viridis', ax=ax2)
ax1.set_title('–ß–∞–µ–≤—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ (–º—É–∂—á–∏–Ω—ã)')
ax2.set_title('–ß–∞–µ–≤—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ (–∂–µ–Ω—â–∏–Ω—ã)')
st.pyplot(fig)


st.write("""### –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö""")
fig, ax = plt.subplots(figsize=(10, 6))
heatmap = sns.heatmap(tips.corr(), annot=True, cmap="crest", linewidths=0.5)
st.pyplot(fig)

st.success('DONE DONE DONE!', icon="‚úÖ")